package com.seekersoftvendingapp.database.table;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMP_CARD".
*/
public class EmpCardDao extends AbstractDao<EmpCard, Void> {

    public static final String TABLENAME = "EMP_CARD";

    /**
     * Properties of entity EmpCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Card = new Property(0, String.class, "card", false, "CARD");
        public final static Property Emp = new Property(1, String.class, "emp", false, "EMP");
        public final static Property IsDel = new Property(2, Boolean.class, "isDel", false, "IS_DEL");
        public final static Property CreatedAt = new Property(3, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(4, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property ObjectId = new Property(5, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Keepone = new Property(6, String.class, "keepone", false, "KEEPONE");
        public final static Property Keeptwo = new Property(7, String.class, "keeptwo", false, "KEEPTWO");
        public final static Property Keepthree = new Property(8, String.class, "keepthree", false, "KEEPTHREE");
    }


    public EmpCardDao(DaoConfig config) {
        super(config);
    }
    
    public EmpCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMP_CARD\" (" + //
                "\"CARD\" TEXT NOT NULL ," + // 0: card
                "\"EMP\" TEXT," + // 1: emp
                "\"IS_DEL\" INTEGER," + // 2: isDel
                "\"CREATED_AT\" INTEGER," + // 3: createdAt
                "\"UPDATED_AT\" INTEGER," + // 4: updatedAt
                "\"OBJECT_ID\" TEXT," + // 5: objectId
                "\"KEEPONE\" TEXT," + // 6: keepone
                "\"KEEPTWO\" TEXT," + // 7: keeptwo
                "\"KEEPTHREE\" TEXT);"); // 8: keepthree
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMP_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmpCard entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCard());
 
        String emp = entity.getEmp();
        if (emp != null) {
            stmt.bindString(2, emp);
        }
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(3, isDel ? 1L: 0L);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(4, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(5, updatedAt.getTime());
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(6, objectId);
        }
 
        String keepone = entity.getKeepone();
        if (keepone != null) {
            stmt.bindString(7, keepone);
        }
 
        String keeptwo = entity.getKeeptwo();
        if (keeptwo != null) {
            stmt.bindString(8, keeptwo);
        }
 
        String keepthree = entity.getKeepthree();
        if (keepthree != null) {
            stmt.bindString(9, keepthree);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmpCard entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCard());
 
        String emp = entity.getEmp();
        if (emp != null) {
            stmt.bindString(2, emp);
        }
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(3, isDel ? 1L: 0L);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(4, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(5, updatedAt.getTime());
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(6, objectId);
        }
 
        String keepone = entity.getKeepone();
        if (keepone != null) {
            stmt.bindString(7, keepone);
        }
 
        String keeptwo = entity.getKeeptwo();
        if (keeptwo != null) {
            stmt.bindString(8, keeptwo);
        }
 
        String keepthree = entity.getKeepthree();
        if (keepthree != null) {
            stmt.bindString(9, keepthree);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EmpCard readEntity(Cursor cursor, int offset) {
        EmpCard entity = new EmpCard( //
            cursor.getString(offset + 0), // card
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // emp
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isDel
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createdAt
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // updatedAt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // objectId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keepone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // keeptwo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // keepthree
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmpCard entity, int offset) {
        entity.setCard(cursor.getString(offset + 0));
        entity.setEmp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsDel(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setObjectId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeepone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKeeptwo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKeepthree(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EmpCard entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EmpCard entity) {
        return null;
    }

    @Override
    public boolean hasKey(EmpCard entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
