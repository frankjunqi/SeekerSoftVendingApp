package com.seekersoftvendingapp.database.table;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMP_POWER".
*/
public class EmpPowerDao extends AbstractDao<EmpPower, String> {

    public static final String TABLENAME = "EMP_POWER";

    /**
     * Properties of entity EmpPower.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsDel = new Property(0, Boolean.class, "isDel", false, "IS_DEL");
        public final static Property Unit = new Property(1, String.class, "unit", false, "UNIT");
        public final static Property Begin = new Property(2, java.util.Date.class, "begin", false, "BEGIN");
        public final static Property Product = new Property(3, String.class, "product", false, "PRODUCT");
        public final static Property Count = new Property(4, Integer.class, "count", false, "COUNT");
        public final static Property Period = new Property(5, Integer.class, "period", false, "PERIOD");
        public final static Property ObjectId = new Property(6, String.class, "objectId", true, "OBJECT_ID");
        public final static Property CreatedAt = new Property(7, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(8, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Keepone = new Property(9, String.class, "keepone", false, "KEEPONE");
        public final static Property Keeptwo = new Property(10, String.class, "keeptwo", false, "KEEPTWO");
        public final static Property Keepthree = new Property(11, String.class, "keepthree", false, "KEEPTHREE");
    }


    public EmpPowerDao(DaoConfig config) {
        super(config);
    }
    
    public EmpPowerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMP_POWER\" (" + //
                "\"IS_DEL\" INTEGER," + // 0: isDel
                "\"UNIT\" TEXT," + // 1: unit
                "\"BEGIN\" INTEGER," + // 2: begin
                "\"PRODUCT\" TEXT," + // 3: product
                "\"COUNT\" INTEGER," + // 4: count
                "\"PERIOD\" INTEGER," + // 5: period
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 6: objectId
                "\"CREATED_AT\" INTEGER," + // 7: createdAt
                "\"UPDATED_AT\" INTEGER," + // 8: updatedAt
                "\"KEEPONE\" TEXT," + // 9: keepone
                "\"KEEPTWO\" TEXT," + // 10: keeptwo
                "\"KEEPTHREE\" TEXT);"); // 11: keepthree
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMP_POWER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmpPower entity) {
        stmt.clearBindings();
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(1, isDel ? 1L: 0L);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(2, unit);
        }
 
        java.util.Date begin = entity.getBegin();
        if (begin != null) {
            stmt.bindLong(3, begin.getTime());
        }
 
        String product = entity.getProduct();
        if (product != null) {
            stmt.bindString(4, product);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(5, count);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(6, period);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(7, objectId);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(8, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(9, updatedAt.getTime());
        }
 
        String keepone = entity.getKeepone();
        if (keepone != null) {
            stmt.bindString(10, keepone);
        }
 
        String keeptwo = entity.getKeeptwo();
        if (keeptwo != null) {
            stmt.bindString(11, keeptwo);
        }
 
        String keepthree = entity.getKeepthree();
        if (keepthree != null) {
            stmt.bindString(12, keepthree);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmpPower entity) {
        stmt.clearBindings();
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(1, isDel ? 1L: 0L);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(2, unit);
        }
 
        java.util.Date begin = entity.getBegin();
        if (begin != null) {
            stmt.bindLong(3, begin.getTime());
        }
 
        String product = entity.getProduct();
        if (product != null) {
            stmt.bindString(4, product);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(5, count);
        }
 
        Integer period = entity.getPeriod();
        if (period != null) {
            stmt.bindLong(6, period);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(7, objectId);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(8, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(9, updatedAt.getTime());
        }
 
        String keepone = entity.getKeepone();
        if (keepone != null) {
            stmt.bindString(10, keepone);
        }
 
        String keeptwo = entity.getKeeptwo();
        if (keeptwo != null) {
            stmt.bindString(11, keeptwo);
        }
 
        String keepthree = entity.getKeepthree();
        if (keepthree != null) {
            stmt.bindString(12, keepthree);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
    }    

    @Override
    public EmpPower readEntity(Cursor cursor, int offset) {
        EmpPower entity = new EmpPower( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0, // isDel
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unit
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // begin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // count
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // period
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // objectId
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createdAt
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // updatedAt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // keepone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // keeptwo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // keepthree
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmpPower entity, int offset) {
        entity.setIsDel(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0);
        entity.setUnit(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBegin(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setProduct(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPeriod(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setObjectId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUpdatedAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setKeepone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setKeeptwo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKeepthree(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EmpPower entity, long rowId) {
        return entity.getObjectId();
    }
    
    @Override
    public String getKey(EmpPower entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmpPower entity) {
        return entity.getObjectId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
